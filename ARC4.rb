# Returns a 9 digit integer value generated by a pure-Ruby implementation of ARC4 PRNG using a given seed.
# This implementation is non-streaming, but could be made into one with small modifications. 

def arc4_random(seed)
		# Initialize empty array to store key.
		key = Array.new()
		key_PRNG = Random.new(seed)
		# Populate key array using seed to generate key.
		256.times do
			key.push(key_PRNG.rand(256))
		end
		# Create a 256 element array to store values for cipher.
		s = Array(0..255)
		index_pointer_x = 0
		key_size = key.length
		# Start Key schedualing phase.
		# Everything beyond this point is conjecture.
		# I have implemented the algo, but I do not understand the RC4 KSA in the context of a PRNG intrinsicly.
		s.each do |s_element|
		# s array is initialized to the identity permutation.    
			index_pointer_x = (index_pointer_x+s_element+key[s_element%key_size])%256
			j[s_element], j[index_pointer_x] = j[index_pointer_x], j[s_element]
		end
		x = 0
		y = 0
		entropy_seeds = Array.new()
		for integer in (0..((1536/4)+4))
			x = (x+1)%256
			y = (y+j[x])%256
			j[x], j[y] = j[y], j[x]
			if integer >= (1536/4)
				entropy_seeds.push(j[(j[x]+j[y])%256])
			end
		end
		print(entropy_seeds[0]<<24)|(entropy_seeds[1]<<16)|(entropy_seeds[2]<<8)|(entropy_seeds[3])
	end
