# Returns an 10 digit integer value generated by a pure-Ruby MT199937 PRNG using a given seed.
# Do not use this for applications requiring crypto-secure PRNG!

def mt199937(seed)
	# Create an 624 element array to store the generator state.
  	twister_state = [(0..624).to_a]
  	# Index for the generator state starts at element zero.
  	twister_state_index = 0
  	# Get the last 32 bits of the state.
  	bitmask_1 = (2 ** 32) - 1
  	# Get 32 bits from the state.
  	bitmask_2 = 2 ** 31
  	# Get the last 31 bits of the state.
  	bitmask_3 = (2 ** 31) - 1
  	# Initialize the generator with the seed.
  	twister_state[0] = seed
  		(1..624).each do |i|
  			twister_state[i] = ((1812433253 * twister_state[i-1]) ^ ((twister_state[i-1] >> 30) + i)) & bitmask_1
  		end
  	if twister_state_index == 0
  		(0..624).each do |i|
  			y = (twister_state[i] & bitmask_2) + (twister_state[(i + 1 ) % 624] & bitmask_3)
        	twister_state[i] = twister_state[(i + 397) % 624] ^ (y >> 1)
        	if y % 2 != 0
        		twister_state[i] ^= 2567483615
        	end
    	end
 		y = twister_state[twister_state_index]
 		# Right shift by 11 bits.
    	y ^= y >> 11
    	# Left shift by 7, and take the bitwise of 2636928640.
    	y ^= (y << 7) & 2636928640
    	# Left shift by 15, and take the bitwise of 4022730752.
    	y ^= (y << 15) & 4022730752
    	# Right shift by 18 bits.
    	y ^= y >> 18
    	twister_state_index = (twister_state_index + 1) % 624
    	# Return tempered integer from generator state.
		print(y)
		end
  	end